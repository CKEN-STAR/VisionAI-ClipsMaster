#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
VisionAI-ClipsMaster 手动UI测试指南
用于指导用户进行手动交互测试
"""

import sys
import os
import time
from pathlib import Path

# 设置项目根目录
PROJECT_ROOT = Path(__file__).resolve().parent
sys.path.append(str(PROJECT_ROOT))

def print_test_guide():
    """打印手动测试指南"""
    print("🎬 VisionAI-ClipsMaster 手动UI测试指南")
    print("=" * 60)
    print("请按照以下步骤进行手动测试，并记录每个功能的工作状态")
    print()
    
    print("📋 测试清单:")
    print()
    
    # 主题切换测试
    print("1. 主题样式测试")
    print("   □ 查看当前界面是否为浅色主题")
    print("   □ 检查按钮、文本框、标签页的样式是否正常")
    print("   □ 验证图标和颜色搭配是否协调")
    print()
    
    # 文件上传测试
    print("2. 文件上传功能测试")
    print("   □ 点击'选择视频文件'按钮，验证文件选择对话框")
    print("   □ 尝试选择不同格式的视频文件(.mp4, .avi, .mov等)")
    print("   □ 点击'导入原始SRT'按钮，上传字幕文件")
    print("   □ 点击'导入爆款SRT'按钮，上传参考字幕")
    print("   □ 验证文件路径是否正确显示在界面上")
    print()
    
    # 语言模式测试
    print("3. 语言模式切换测试")
    print("   □ 点击'自动检测'单选按钮")
    print("   □ 点击'中文模式'单选按钮，观察是否弹出模型下载对话框")
    print("   □ 点击'英文模式'单选按钮，观察是否弹出模型下载对话框")
    print("   □ 在模型下载对话框中测试'确定'和'取消'按钮")
    print()
    
    # 处理功能测试
    print("4. 视频处理功能测试")
    print("   □ 点击'开始处理'按钮")
    print("   □ 观察进度条和状态显示")
    print("   □ 检查日志输出区域的信息")
    print("   □ 测试'停止处理'按钮（如果有）")
    print()
    
    # 模型训练测试
    print("5. 模型训练功能测试")
    print("   □ 切换到'模型训练'标签页")
    print("   □ 测试训练数据上传功能")
    print("   □ 调整训练参数设置")
    print("   □ 点击'开始训练'按钮")
    print("   □ 观察训练进度和日志")
    print()
    
    # 设置页面测试
    print("6. 设置页面功能测试")
    print("   □ 切换到'设置'标签页")
    print("   □ 测试FFmpeg路径配置")
    print("   □ 调整内存限制设置")
    print("   □ 测试快捷键配置")
    print("   □ 修改日志级别设置")
    print("   □ 点击'保存设置'按钮")
    print()
    
    # 交互响应测试
    print("7. 交互响应性测试")
    print("   □ 测试鼠标悬停效果")
    print("   □ 测试按钮点击反馈")
    print("   □ 尝试快捷键操作")
    print("   □ 测试右键菜单（如果有）")
    print("   □ 验证拖拽功能（如果支持）")
    print()
    
    # 异常处理测试
    print("8. 异常处理测试")
    print("   □ 尝试上传无效格式的文件")
    print("   □ 在没有选择文件的情况下点击处理")
    print("   □ 测试网络中断情况下的界面反应")
    print("   □ 观察错误提示对话框")
    print()
    
    # 窗口操作测试
    print("9. 窗口操作测试")
    print("   □ 拖拽窗口边缘调整大小")
    print("   □ 双击标题栏最大化/还原")
    print("   □ 点击最小化按钮")
    print("   □ 点击关闭按钮")
    print()
    
    print("📊 测试记录表格:")
    print("-" * 60)
    print("| 功能项目 | 状态 | 响应时间 | 备注 |")
    print("|---------|------|----------|------|")
    print("| 主题样式 | □ | ___s | ____ |")
    print("| 文件上传 | □ | ___s | ____ |")
    print("| 语言切换 | □ | ___s | ____ |")
    print("| 视频处理 | □ | ___s | ____ |")
    print("| 模型训练 | □ | ___s | ____ |")
    print("| 设置页面 | □ | ___s | ____ |")
    print("| 交互响应 | □ | ___s | ____ |")
    print("| 异常处理 | □ | ___s | ____ |")
    print("| 窗口操作 | □ | ___s | ____ |")
    print("-" * 60)
    print()
    
    print("✅ 状态说明:")
    print("   ✅ PASS - 功能正常工作")
    print("   ❌ FAIL - 功能存在问题")
    print("   ⚠️ WARN - 功能部分工作或有警告")
    print()
    
    print("⏱️ 响应时间目标:")
    print("   按钮点击: ≤1秒")
    print("   标签页切换: ≤0.5秒")
    print("   文件对话框: ≤2秒")
    print("   处理开始: ≤3秒")
    print()

def create_test_files():
    """创建测试用的示例文件"""
    print("📁 创建测试文件...")
    
    # 创建示例SRT文件
    sample_srt = """1
00:00:01,000 --> 00:00:05,000
欢迎使用VisionAI-ClipsMaster

2
00:00:06,000 --> 00:00:10,000
这是一个AI驱动的短剧混剪工具

3
00:00:11,000 --> 00:00:15,000
支持中英文双语处理

4
00:00:16,000 --> 00:00:20,000
Welcome to VisionAI-ClipsMaster

5
00:00:21,000 --> 00:00:25,000
AI-powered short drama remixing tool
"""
    
    # 保存示例文件
    test_dir = Path("test_files")
    test_dir.mkdir(exist_ok=True)
    
    srt_file = test_dir / "sample_original.srt"
    with open(srt_file, 'w', encoding='utf-8') as f:
        f.write(sample_srt)
    
    # 创建爆款示例SRT
    viral_srt = """1
00:00:01,000 --> 00:00:03,000
震惊！AI竟然能这样剪视频

2
00:00:04,000 --> 00:00:06,000
三秒学会短剧混剪神技

3
00:00:07,000 --> 00:00:09,000
不看后悔系列

4
00:00:10,000 --> 00:00:12,000
Amazing AI video editing

5
00:00:13,000 --> 00:00:15,000
You won't believe what happens next
"""
    
    viral_file = test_dir / "sample_viral.srt"
    with open(viral_file, 'w', encoding='utf-8') as f:
        f.write(viral_srt)
    
    print(f"✅ 测试文件已创建:")
    print(f"   原始SRT: {srt_file.absolute()}")
    print(f"   爆款SRT: {viral_file.absolute()}")
    print()

def launch_app_for_testing():
    """启动应用程序进行测试"""
    print("🚀 启动VisionAI-ClipsMaster进行手动测试...")
    print()
    
    try:
        # 导入并启动应用
        from PyQt6.QtWidgets import QApplication
        from simple_ui_fixed import SimpleScreenplayApp
        
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
        
        window = SimpleScreenplayApp()
        window.show()
        
        print("✅ 应用程序已启动")
        print("📋 请按照上述测试指南进行手动测试")
        print("⌨️ 按 Ctrl+C 退出测试")
        print()
        
        return app.exec()
        
    except KeyboardInterrupt:
        print("\n🛑 用户中断测试")
        return 0
    except Exception as e:
        print(f"❌ 启动失败: {e}")
        return 1

def main():
    """主函数"""
    print("🎯 VisionAI-ClipsMaster 手动UI测试工具")
    print("=" * 60)
    print()
    
    # 显示测试指南
    print_test_guide()
    
    # 创建测试文件
    create_test_files()
    
    # 询问是否启动应用
    while True:
        choice = input("是否现在启动应用程序进行测试？(y/n): ").lower().strip()
        if choice in ['y', 'yes', '是']:
            return launch_app_for_testing()
        elif choice in ['n', 'no', '否']:
            print("📋 请手动启动应用程序并按照指南进行测试")
            print("🚀 启动命令: python simple_ui_fixed.py")
            return 0
        else:
            print("请输入 y 或 n")

if __name__ == "__main__":
    sys.exit(main())

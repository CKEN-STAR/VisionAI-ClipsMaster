name: Branch Protection

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

jobs:
  validate_pr:
    name: Pull Request Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/requirements-test.txt
      
      - name: Run unit tests
        run: |
          python -m pytest tests/unit/
      
      - name: Check code formatting
        run: |
          pip install black
          black --check visionai_clips/ tests/
      
      - name: Run pylint
        run: |
          pip install pylint
          pylint --disable=all --enable=E0001,E0100,E0101,E0102,E0103,E0104,E0105,E0106,E0107,E0108,E0110,E0112,E0113,E0114,E0115,E0116,E0117,E0001,E0202,E0203,E0211,E0213,E0236,E0237,E0238,E0239,E0240,E0241,E0301,E0302,E0601,E0603,E0604,E0701,E0702,E0703,E0704,E0711,E0712,E1003,E1101,E1102,E1111,E1120,E1121,E1123,E1124,E1125,E1126,E1127,E1128,E1129,E1130,E1131,E1132,E1133,E1134,E1135,E1136,E1137,E1138,E1139,E1200,E1201,E1205,E1206,E1301,E1302,E1303,E1304,E1305,E1306 visionai_clips/ tests/

      - name: Check license compliance
        id: license
        run: |
          python tests/check_license_compliance.py --ci-mode --output=licenses_results.json
      
      - name: Upload dependency analysis
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-analysis
          path: licenses_results.json
          
      - name: Block PR on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            // 创建失败原因信息
            let failureReason = '### ❌ 自动化门禁检查失败\n\n';
            
            if ('${{ steps.license.outcome }}' === 'failure') {
              failureReason += '- 许可证合规性检查未通过\n';
            }
            
            if ('${{ steps.unit_tests.outcome }}' === 'failure') {
              failureReason += '- 单元测试未通过\n';
            }
            
            if ('${{ job.status }}' === 'failure') {
              failureReason += '- 其他检查未通过，请查看工作流日志获取详细信息\n';
            }
            
            failureReason += '\n请修复以上问题后重新提交。';
            
            // 添加PR评论
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: failureReason
            });
      
      - name: Approve PR on success
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            // 添加成功评论
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: '### ✅ 自动化门禁检查通过\n\n所有质量检查均已通过!'
            }); 
name: VisionAI-ClipsMaster Deploy

on:
  push:
    tags:
      - 'v*'  # 触发标签以v开头的版本
  workflow_dispatch:  # 允许手动触发

jobs:
  build-package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 获取完整历史以正确生成版本号
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
    
    - name: Extract version
      id: get_version
      run: |
        # 如果是标签触发，使用标签名作为版本
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          # 否则使用日期和短提交哈希
          VERSION=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Build package
      run: |
        # 创建版本文件
        echo "VERSION = '${{ env.VERSION }}'" > src/version.py
        
        # 构建Python包
        python -m build
    
    - name: Upload Python package
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Create release package
      run: |
        # 创建发布目录
        mkdir -p release
        
        # 复制核心文件
        cp -r src configs models ui *.py release/
        cp requirements.txt README.md LICENSE release/
        
        # 创建安装脚本
        echo '#!/bin/bash
        # VisionAI-ClipsMaster安装脚本
        echo "正在安装VisionAI-ClipsMaster ${{ env.VERSION }}..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "安装完成，可使用 python app.py 启动程序"
        ' > release/install.sh
        chmod +x release/install.sh
        
        # 创建Windows批处理安装脚本
        echo '@echo off
        echo 正在安装VisionAI-ClipsMaster ${{ env.VERSION }}...
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo 安装完成，可使用 python app.py 启动程序
        pause
        ' > release/install.bat
        
        # 创建启动脚本
        echo '#!/bin/bash
        python app.py
        ' > release/start.sh
        chmod +x release/start.sh
        
        echo '@echo off
        python app.py
        ' > release/start.bat
        
        # 打包
        cd release
        zip -r ../VisionAI-ClipsMaster-${{ env.VERSION }}.zip *
    
    - name: Upload release package
      uses: actions/upload-artifact@v3
      with:
        name: release-package
        path: VisionAI-ClipsMaster-${{ env.VERSION }}.zip

  create-release:
    runs-on: ubuntu-latest
    needs: build-package
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download Python package
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    
    - name: Download release package
      uses: actions/download-artifact@v3
      with:
        name: release-package
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
          VisionAI-ClipsMaster-*.zip
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
        
  build-docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Extract version
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          visionai/clipmaster:latest
          visionai/clipmaster:${{ env.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 
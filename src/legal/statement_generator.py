#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
VisionAI-ClipsMaster - 法律声明动态生成器

根据不同地区的法律法规要求，动态生成各类法律声明和免责声明。
主要包括：
- 中国区的算法备案号和监管信息
- 欧盟区的算法透明度报告链接
- 全球通用的版权和使用声明
- 特定国家和地区的法律合规声明
"""

import os
import sys
import json
import logging
import datetime
from typing import Dict, List, Optional, Union, Any
from pathlib import Path

# 获取项目根目录
PROJECT_ROOT = Path(__file__).resolve().parents[2]
sys.path.append(str(PROJECT_ROOT))

# 尝试导入项目日志模块
try:
    from src.utils.log_handler import get_logger
    logger = get_logger("legal_statement")
except ImportError:
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger("legal_statement")

# 配置文件路径
CONFIG_DIR = os.path.join(PROJECT_ROOT, "configs")
STATEMENTS_CONFIG_PATH = os.path.join(CONFIG_DIR, "legal", "legal_statements.json")

# 确保配置目录存在
os.makedirs(os.path.join(CONFIG_DIR, "legal"), exist_ok=True)


class LegalStatementGenerator:
    """法律声明生成器"""
    
    # 单例实例
    _instance = None
    
    def __new__(cls, *args, **kwargs):
        """实现单例模式，确保全局只有一个实例"""
        if cls._instance is None:
            cls._instance = super(LegalStatementGenerator, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance
    
    def __init__(self, config_path: str = None):
        """
        初始化法律声明生成器
        
        Args:
            config_path: 配置文件路径，默认使用configs/legal/legal_statements.json
        """
        # 避免重复初始化
        if getattr(self, '_initialized', False):
            return
            
        self.config_path = config_path or STATEMENTS_CONFIG_PATH
        
        # 各类声明模板
        self.templates = {
            # 免责声明模板
            "disclaimer": {
                "zh": "本软件生成的内容仅供参考，不构成任何形式的法律、财务或专业建议。"
                     "使用者应自行判断内容的准确性和适用性，并对其使用承担全部责任。"
                     "开发者对因使用生成内容而导致的任何直接或间接损失不承担责任。",
                     
                "en": "Content generated by this software is for reference only and does not constitute legal, "
                     "financial, or professional advice of any kind. Users should exercise their own judgment "
                     "regarding the accuracy and applicability of the content and assume full responsibility for its use. "
                     "The developers shall not be liable for any direct or indirect losses resulting from the use of the generated content."
            },
            
            # 算法备案声明
            "algorithm_registration": {
                "zh": "本产品生成内容已通过国家网信办算法备案（备案号：京AI2024XXX号），"
                     "符合《互联网信息服务算法推荐管理规定》要求。",
                     
                "en": "Algorithm registered with Cyberspace Administration of China (Reg.No.: BJ-AI-2024XXX), "
                     "in compliance with the 'Internet Information Service Algorithm Recommendation Management Provisions'."
            },
            
            # 算法透明度声明
            "algorithm_transparency": {
                "zh": "依据欧盟《人工智能法案》，我们提供算法透明度报告，详情请访问："
                     "https://visionai-clipsmaster.example.com/transparency/report/zh",
                     
                "en": "In accordance with the EU AI Act, we provide an algorithm transparency report available at: "
                     "https://visionai-clipsmaster.example.com/transparency/report/en"
            },
            
            # 版权声明
            "copyright": {
                "zh": "© {year} VisionAI-ClipsMaster。保留所有权利。未经许可，"
                     "禁止复制、分发或修改生成内容。生成内容的知识产权归原始素材版权所有者所有。",
                     
                "en": "© {year} VisionAI-ClipsMaster. All rights reserved. Reproduction, distribution, or modification "
                     "of the generated content without permission is prohibited. Intellectual property rights of the generated "
                     "content belong to the copyright owners of the original materials."
            },
            
            # 数据处理声明
            "data_processing": {
                "zh": "使用本软件即表示您同意我们根据隐私政策处理您的数据。您有权访问、更正和删除您的个人数据。"
                     "详情请参阅：https://visionai-clipsmaster.example.com/privacy/zh",
                     
                "en": "By using this software, you consent to the processing of your data in accordance with our Privacy Policy. "
                     "You have the right to access, rectify, and delete your personal data. "
                     "For details, please visit: https://visionai-clipsmaster.example.com/privacy/en"
            },
            
            # 内容审核声明
            "content_review": {
                "zh": "本软件包含自动内容审核机制，以确保生成内容符合相关法律法规。"
                     "如对审核结果有异议，请联系我们的客服团队。",
                     
                "en": "This software includes automated content review mechanisms to ensure generated content complies with relevant laws and regulations. "
                     "If you dispute a review result, please contact our customer service team."
            },
            
            # 未成年人保护声明
            "minor_protection": {
                "zh": "本软件实施未成年人保护措施，未满18岁用户使用本软件需在监护人指导下进行。",
                
                "en": "This software implements minor protection measures. Users under 18 years of age should use this software under the guidance of a guardian."
            }
        }
        
        # 加载配置文件
        self._load_config()
        
        # 初始化完成标记
        self._initialized = True
        
        logger.info("法律声明生成器初始化完成")
    
    def _load_config(self) -> None:
        """从配置文件加载模板"""
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    # 更新默认模板
                    for statement_type, templates in config.items():
                        if statement_type in self.templates:
                            self.templates[statement_type].update(templates)
                        else:
                            self.templates[statement_type] = templates
                            
                logger.info(f"已从 {self.config_path} 加载法律声明模板")
            else:
                # 创建默认配置文件
                with open(self.config_path, 'w', encoding='utf-8') as f:
                    json.dump(self.templates, f, ensure_ascii=False, indent=2)
                logger.info(f"已创建默认法律声明模板配置文件: {self.config_path}")
        except Exception as e:
            logger.error(f"加载法律声明模板失败: {str(e)}，使用默认模板")
    
    def generate_statement(self, statement_type: str, lang: str = "zh", **kwargs) -> str:
        """
        生成指定类型的法律声明
        
        Args:
            statement_type: 声明类型，如"disclaimer", "copyright"等
            lang: 语言，如"zh", "en"
            **kwargs: 模板变量替换参数
            
        Returns:
            str: 生成的法律声明文本
        """
        # 确保语言有效
        if lang not in ["zh", "en"]:
            logger.warning(f"不支持的语言: {lang}，使用中文")
            lang = "zh"
            
        # 确保声明类型有效
        if statement_type not in self.templates:
            logger.warning(f"未找到声明类型: {statement_type}，使用免责声明")
            statement_type = "disclaimer"
            
        # 确保语言版本存在
        if lang not in self.templates[statement_type]:
            alternative_lang = "zh" if lang == "en" else "en"
            logger.warning(f"未找到{lang}版本的{statement_type}，使用{alternative_lang}版本")
            lang = alternative_lang
            
        # 获取模板
        template = self.templates[statement_type][lang]
        
        # 添加当前年份（如果模板中有{year}）
        if "{year}" in template and "year" not in kwargs:
            kwargs["year"] = str(datetime.datetime.now().year)
            
        # 尝试应用模板变量
        try:
            statement = template.format(**kwargs)
        except KeyError as e:
            logger.error(f"模板变量替换失败: {str(e)}，使用原始模板")
            statement = template
            
        return statement
    
    def generate_disclaimer(self, lang: str = "zh") -> str:
        """
        生成免责声明
        
        Args:
            lang: 语言，如"zh", "en"
            
        Returns:
            str: 免责声明文本
        """
        return self.generate_statement("disclaimer", lang)
    
    def generate_algorithm_registration(self, lang: str = "zh", reg_number: str = None) -> str:
        """
        生成算法备案声明
        
        Args:
            lang: 语言，如"zh", "en"
            reg_number: 可选的备案号，默认使用模板中的备案号
            
        Returns:
            str: 算法备案声明文本
        """
        kwargs = {}
        if reg_number:
            # 替换模板中的备案号
            template = self.templates["algorithm_registration"][lang]
            if lang == "zh":
                template = template.replace("京AI2024XXX号", reg_number)
            else:
                template = template.replace("BJ-AI-2024XXX", reg_number)
            self.templates["algorithm_registration"][lang] = template
            
        return self.generate_statement("algorithm_registration", lang, **kwargs)
    
    def generate_algorithm_transparency(self, lang: str = "zh", report_url: str = None) -> str:
        """
        生成算法透明度声明
        
        Args:
            lang: 语言，如"zh", "en"
            report_url: 可选的报告URL，默认使用模板中的URL
            
        Returns:
            str: 算法透明度声明文本
        """
        kwargs = {}
        if report_url:
            # 替换模板中的URL
            template = self.templates["algorithm_transparency"][lang]
            if lang == "zh":
                template = template.replace("https://visionai-clipsmaster.example.com/transparency/report/zh", report_url)
            else:
                template = template.replace("https://visionai-clipsmaster.example.com/transparency/report/en", report_url)
            self.templates["algorithm_transparency"][lang] = template
            
        return self.generate_statement("algorithm_transparency", lang, **kwargs)
    
    def generate_copyright(self, lang: str = "zh", year: str = None, owner: str = None) -> str:
        """
        生成版权声明
        
        Args:
            lang: 语言，如"zh", "en"
            year: 可选的年份，默认使用当前年份
            owner: 可选的版权所有者，默认使用"VisionAI-ClipsMaster"
            
        Returns:
            str: 版权声明文本
        """
        kwargs = {}
        if year:
            kwargs["year"] = year
        if owner:
            # 替换模板中的版权所有者
            template = self.templates["copyright"][lang]
            template = template.replace("VisionAI-ClipsMaster", owner)
            self.templates["copyright"][lang] = template
            
        return self.generate_statement("copyright", lang, **kwargs)
    
    def generate_all_required_statements(self, lang: str = "zh", region: str = None) -> Dict[str, str]:
        """
        根据地区生成所有必需的法律声明
        
        Args:
            lang: 语言，如"zh", "en"
            region: 地区，如"CN", "EU", "US"，默认根据语言自动选择
            
        Returns:
            Dict[str, str]: 包含各类法律声明的字典
        """
        # 确定地区
        if not region:
            if lang == "zh":
                region = "CN"
            elif lang == "en":
                # 如果未明确指定，英文版默认按照欧美标准
                region = "EU"
            else:
                region = "GLOBAL"
                
        # 所有地区都需要的声明
        result = {
            "disclaimer": self.generate_disclaimer(lang),
            "copyright": self.generate_copyright(lang)
        }
        
        # 根据地区添加特定声明
        if region == "CN":
            result["algorithm_registration"] = self.generate_algorithm_registration(lang)
            result["content_review"] = self.generate_statement("content_review", lang)
            result["minor_protection"] = self.generate_statement("minor_protection", lang)
        elif region == "EU":
            result["algorithm_transparency"] = self.generate_algorithm_transparency(lang)
            result["data_processing"] = self.generate_statement("data_processing", lang)
        elif region == "US":
            result["data_processing"] = self.generate_statement("data_processing", lang)
            
        return result
    
    def generate_video_end_credits(self, lang: str = "zh", region: str = None) -> str:
        """
        生成视频结尾片尾字幕的法律声明
        
        Args:
            lang: 语言，如"zh", "en"
            region: 地区，如"CN", "EU", "US"，默认根据语言自动选择
            
        Returns:
            str: 用于视频片尾的法律声明文本
        """
        statements = self.generate_all_required_statements(lang, region)
        
        # 重要声明放在前面
        ordered_statements = []
        
        # 首先添加版权声明
        if "copyright" in statements:
            ordered_statements.append(statements["copyright"])
            
        # 添加地区特定声明
        if region == "CN" and "algorithm_registration" in statements:
            ordered_statements.append(statements["algorithm_registration"])
        elif region == "EU" and "algorithm_transparency" in statements:
            ordered_statements.append(statements["algorithm_transparency"])
            
        # 添加免责声明
        if "disclaimer" in statements:
            ordered_statements.append(statements["disclaimer"])
            
        # 合并所有声明，根据语言选择合适的分隔符
        if lang == "zh":
            return "\n\n".join(ordered_statements)
        else:
            return "\n\n".join(ordered_statements)
    
    def get_statement_types(self) -> List[str]:
        """
        获取所有可用的声明类型
        
        Returns:
            List[str]: 声明类型列表
        """
        return list(self.templates.keys())
    
    def add_statement_template(self, statement_type: str, lang: str, template: str) -> None:
        """
        添加新的声明模板
        
        Args:
            statement_type: 声明类型
            lang: 语言
            template: 模板文本
        """
        if statement_type not in self.templates:
            self.templates[statement_type] = {}
            
        self.templates[statement_type][lang] = template
        logger.info(f"已添加{lang}版本的{statement_type}模板")
        
        # 保存到配置文件
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(self.templates, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"保存模板到配置文件失败: {str(e)}")
            
    def update_statement_template(self, statement_type: str, lang: str, template: str) -> bool:
        """
        更新现有的声明模板
        
        Args:
            statement_type: 声明类型
            lang: 语言
            template: 新的模板文本
            
        Returns:
            bool: 是否成功更新
        """
        if statement_type not in self.templates or lang not in self.templates[statement_type]:
            logger.warning(f"未找到{lang}版本的{statement_type}模板，无法更新")
            return False
            
        self.templates[statement_type][lang] = template
        logger.info(f"已更新{lang}版本的{statement_type}模板")
        
        # 保存到配置文件
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(self.templates, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            logger.error(f"保存模板到配置文件失败: {str(e)}")
            return False


# 便捷函数
def generate_disclaimer(lang: str = "zh") -> str:
    """
    生成免责声明的便捷函数
    
    Args:
        lang: 语言，如"zh", "en"
        
    Returns:
        str: 免责声明文本
    """
    generator = LegalStatementGenerator()
    return generator.generate_disclaimer(lang)


def generate_algorithm_registration(lang: str = "zh", reg_number: str = None) -> str:
    """
    生成算法备案声明的便捷函数
    
    Args:
        lang: 语言，如"zh", "en"
        reg_number: 可选的备案号
        
    Returns:
        str: 算法备案声明文本
    """
    generator = LegalStatementGenerator()
    return generator.generate_algorithm_registration(lang, reg_number)


def generate_copyright(lang: str = "zh", year: str = None, owner: str = None) -> str:
    """
    生成版权声明的便捷函数
    
    Args:
        lang: 语言，如"zh", "en"
        year: 可选的年份，默认使用当前年份
        owner: 可选的版权所有者
        
    Returns:
        str: 版权声明文本
    """
    generator = LegalStatementGenerator()
    return generator.generate_copyright(lang, year, owner)


# 快速测试
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    logger.info("法律声明生成器自测")
    
    # 创建生成器实例
    generator = LegalStatementGenerator()
    
    # 测试基本声明生成
    print("\n=== 基本声明生成 ===")
    print("\n-- 中文免责声明 --")
    print(generator.generate_disclaimer("zh"))
    
    print("\n-- 英文免责声明 --")
    print(generator.generate_disclaimer("en"))
    
    print("\n-- 中文算法备案声明 --")
    print(generator.generate_algorithm_registration("zh"))
    
    print("\n-- 英文算法备案声明 --")
    print(generator.generate_algorithm_registration("en"))
    
    print("\n-- 中文版权声明 --")
    print(generator.generate_copyright("zh"))
    
    # 测试地区特定声明生成
    print("\n=== 地区特定声明生成 ===")
    
    print("\n-- 中国地区所需声明 (中文) --")
    cn_statements = generator.generate_all_required_statements("zh", "CN")
    for key, value in cn_statements.items():
        print(f"\n{key}:")
        print(value)
    
    print("\n-- 欧盟地区所需声明 (英文) --")
    eu_statements = generator.generate_all_required_statements("en", "EU")
    for key, value in eu_statements.items():
        print(f"\n{key}:")
        print(value)
    
    # 测试视频片尾声明
    print("\n=== 视频片尾声明 ===")
    
    print("\n-- 中国地区视频片尾声明 (中文) --")
    print(generator.generate_video_end_credits("zh", "CN"))
    
    print("\n-- 欧盟地区视频片尾声明 (英文) --")
    print(generator.generate_video_end_credits("en", "EU"))
    
    logger.info("测试完成!") 
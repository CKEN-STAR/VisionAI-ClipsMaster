# VisionAI-ClipsMaster Docker Compose配置
version: '3.8'

services:
  # 主应用服务
  visionai-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: visionai-clipsmaster
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      # 数据目录
      - ./data:/home/visionai/data
      - ./models:/home/visionai/models
      - ./logs:/home/visionai/logs
      # 配置文件
      - ./configs:/home/visionai/configs
    environment:
      - VISIONAI_MODE=full
      - VISIONAI_MAX_MEMORY=7000
      - VISIONAI_PORT=8080
      - VISIONAI_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "python", "scripts/check_environment.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - visionai-network

  # 轻量版服务 (4GB内存设备)
  visionai-lite:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: lite
    container_name: visionai-clipsmaster-lite
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - ./data:/home/visionai/data
      - ./models:/home/visionai/models
      - ./logs:/home/visionai/logs
      - ./configs:/home/visionai/configs
    environment:
      - VISIONAI_MODE=lite
      - VISIONAI_MAX_MEMORY=3800
      - VISIONAI_PORT=8080
      - VISIONAI_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "python", "scripts/check_environment.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - visionai-network
    profiles:
      - lite

  # Redis缓存服务 (可选)
  redis:
    image: redis:7-alpine
    container_name: visionai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - visionai-network
    profiles:
      - cache

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: visionai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - visionai-network
    profiles:
      - monitoring

  # Grafana仪表板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: visionai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - visionai-network
    profiles:
      - monitoring

  # Nginx反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: visionai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - visionai-app
    networks:
      - visionai-network
    profiles:
      - proxy

# 网络配置
networks:
  visionai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# 扩展配置
x-common-variables: &common-variables
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
